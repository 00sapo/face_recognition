format 214
"head_pose_estimation" // source::extern_libs::head_pose_estimation
  revision 1
  modified_by 2 "sapo"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  cpp_h_dir "/home/sapo/Develop/face_recognition/source/extern_libs/head_pose_estimation/"
  cpp_src_dir "/home/sapo/Develop/face_recognition/source/extern_libs/head_pose_estimation/"
  classview 128130 "head_pose_estimation"
    
    classdiagramsettings member_max_width 0 end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 128386 "CRForestEstimator"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      operation 137858 "CRForestEstimator"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} { crForest = 0; };
"
	
	
	
	
      end

      operation 137986 "~CRForestEstimator"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} { if(crForest) delete crForest; };
"
	
	
	
	
      end

      operation 138114 "loadForest"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 2
	  param in name "treespath" explicit_type "char"
	  param in name "ntrees" explicit_type "int"
	    defaultvalue "0"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 138242 "estimate"
	const public explicit_return_type "void"
	nparams 11
	  param in name "im3D" explicit_type "cv::Mat"
	  param inout name "means" explicit_type "std::vector< cv::Vec<float,POSE_SIZE> >"
	  param inout name "clusters" explicit_type "std::vector< std::vector< Vote > >"
	  param inout name "votes" explicit_type "std::vector< Vote >"
	  param in name "stride" explicit_type "int"
	    defaultvalue "5"
	  param in name "max_variance" explicit_type "float"
	    defaultvalue "1000"
	  param in name "prob_th" explicit_type "float"
	    defaultvalue "1.0"
	  param in name "larger_radius_ratio" explicit_type "float"
	    defaultvalue "1.0"
	  param in name "smaller_radius_ratio" explicit_type "float"
	    defaultvalue "6.0"
	  param in name "verbose" explicit_type "bool"
	    defaultvalue "false"
	  param in name "threshold" explicit_type "int"
	    defaultvalue "400 //head threshold
    "
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}, ${t2} & ${p2}${v2}, ${t3} & ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}, ${t7} ${p7}${v7}, ${t8} ${p8}${v8}, ${t9} ${p9}${v9}, ${t10} ${p10}${v10}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}, ${t2} & ${p2}, ${t3} & ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}, ${t9} ${p9}, ${t10} ${p10}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 138370 "getBoundingBox"
	const private explicit_return_type "cv::Rect"
	nparams 1
	  param in name "im3D" explicit_type "cv::Mat"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      classrelation 129922 // crForest (<unidirectional association>)
	relation 129922 --->
	  a role_name "crForest" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    classrelation_ref 129922 // crForest (<unidirectional association>)
	  b parent class_ref 130434 // CRForest
      end
    end

    class 130434 "CRForest"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      operation 136578 "CRForest"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "trees" explicit_type "int"
	    defaultvalue "0"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw}${abstract} {
      vTrees.resize(trees);
    };
"
	
	
	
	
	comment " Constructor"
      end

      operation 136706 "~CRForest"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {
      for(std::vector<CRTree*>::iterator it = vTrees.begin(); it != vTrees.end(); ++it)
    	  delete *it; // delete pointers
      vTrees.clear(); // specialized routine for clearing trees
    };
"
	
	
	
	
	comment " Destructor"
      end

      operation 136834 "getSize"
	const cpp_inline public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {return vTrees.size();};
"
	
	
	
	
	comment " Set/Get functions"
      end

      operation 136962 "getDepth"
	const cpp_inline public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {return vTrees[0]->getDepth();};
"
	
	
	
	
	comment " get size of trees"
      end

      operation 137090 "getPatchWidth"
	cpp_inline public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return vTrees[0]->getPatchWidth(); };
"
	
	
	
	
      end

      operation 137218 "getPatchHeight"
	cpp_inline public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return vTrees[0]->getPatchHeight(); };
"
	
	
	
	
      end

      operation 137346 "getNoChans"
	cpp_inline public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return vTrees[0]->getNoChannels(); };
"
	
	
	
	
      end

      operation 137474 "regressionIntegral"
	preserve_cpp_body_indent const cpp_inline public explicit_return_type "std::vector< const LeafNode* >"
	nparams 3
	  param in name "patch" explicit_type "std::vector< cv::Mat >"
	  param in name "nonZeros" explicit_type "cv::Mat"
	  param in name "roi" explicit_type "cv::Rect"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, const ${t2} & ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// Regression

${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 137602 "loadForest"
	preserve_cpp_body_indent cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "filename" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      classrelation 129794 // vTrees (<unidirectional association>)
	relation 129794 --->
	  stereotype "std::vector"
	  a role_name "vTrees" public
	    comment " Trees
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}*> ${name}${value};
"
	    classrelation_ref 129794 // vTrees (<unidirectional association>)
	  b parent class_ref 130562 // CRTree
      end
    end

    class 130562 "CRTree"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      operation 138754 "CRTree"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} {};
"
	
	
	
	
      end

      operation 138882 "~CRTree"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} { delete [] leaf; delete[] treetable; };
"
	
	
	
	
      end

      operation 139010 "loadTree"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 1
	  param in name "filename" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 139138 "getDepth"
	const cpp_inline public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {return max_depth;};
"
	
	
	
	
      end

      operation 139266 "getPatchWidth"
	const cpp_inline public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {return m_pwidth;};
"
	
	
	
	
      end

      operation 139394 "getPatchHeight"
	const cpp_inline public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {return m_pheight;};
"
	
	
	
	
      end

      operation 139522 "getNoChannels"
	const cpp_inline public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {return m_no_chans;};
"
	
	
	
	
      end

      operation 139650 "regressionIntegral"
	preserve_cpp_body_indent cpp_inline public return_type class_ref 130818 // LeafNode
	nparams 3
	  param in name "patch" explicit_type "std::vector< cv::Mat >"
	  param in name "nonZeros" explicit_type "cv::Mat"
	  param in name "roi" explicit_type "cv::Rect"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, const ${t2} & ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      attribute 130050 "m_pwidth"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 130178 "m_pheight"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 130306 "m_no_chans"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 130434 "treetable"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Data structure
 tree table
"
      end

      attribute 130562 "num_nodes"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " number of nodes: 2^(max_depth+1)-1
"
      end

      attribute 130690 "num_leaf"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " number of leafs
"
      end

      attribute 130818 "max_depth"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 130050 // leaf (<unidirectional association>)
	relation 130050 --->
	  a role_name "leaf" private
	    comment "leafs as vector
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    classrelation_ref 130050 // leaf (<unidirectional association>)
	  b parent class_ref 130818 // LeafNode
      end
    end

    class 130690 "Vote"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 129282 "vote"
	public explicit_type "float,POSE_SIZE"
	stereotype "cv::Vec"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 129410 "trace"
	const_attribute public explicit_type "float"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 129538 "conf"
	const_attribute public explicit_type "float"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 137730 "operator <"
	const cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "a" type class_ref 130690 // Vote
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { return trace<a.trace; };
"
	
	
	
	
      end
    end

    class 130818 "LeafNode"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Structure for the leafs"
      operation 138498 "LeafNode"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} { };
"
	
	
	
	
      end

      operation 138626 "~LeafNode"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} { };
"
	
	
	
	
      end

      attribute 129666 "pfg"
	public explicit_type "float"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Probability of belonging to a head
"
      end

      attribute 129794 "mean"
	public explicit_type "cv::Mat"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " mean vector
"
      end

      attribute 129922 "trace"
	public explicit_type "float"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " trace of the covariance matrix
"
      end
    end
  end

  deploymentview 128258 "head_pose_estimation"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 129154 "CRForest"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 130434 // CRForest
      end
    end

    artifact 129282 "CRForestEstimator"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 130690 // Vote
	class_ref 128386 // CRForestEstimator
      end
    end

    artifact 129410 "CRTree"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 130818 // LeafNode
	class_ref 130562 // CRTree
      end
    end

    artifact 130562 "main"
      stereotype "source"
      cpp_src "int main(int argc, char* argv[])
{

	if( argc != 3 ){

		cout << \"usage: ./head_pose_estimation config_file depth_image\" << endl;
		exit(-1);
	}

	loadConfig(argv[1]);
	CRForestEstimator estimator;
	if( !estimator.loadForest(g_treepath.c_str(), g_ntrees) ){

		cerr << \"could not read forest!\" << endl;
		exit(-1);
	}

	string depth_fname(argv[2]);

	//read calibration file (should be in the same directory as the depth image!)
	string cal_filename = depth_fname.substr(0,depth_fname.find_last_of(\"/\")+1);
	cal_filename += \"depth.cal\";
	ifstream is(cal_filename.c_str());
	if (!is){
		cerr << \"depth.cal file not found in the same folder as the depth image! \" << endl;
		return -1;
	}
	//read intrinsics only
	float depth_intrinsic[9];	for(int i =0; i<9; ++i)	is >> depth_intrinsic[i];
	is.close();

	Mat depthImg;
	//read depth image (compressed!)
	if (!loadDepthImageCompressed( depthImg, depth_fname.c_str() ))
		return -1;

	Mat img3D;
	img3D.create( depthImg.rows, depthImg.cols, CV_32FC3 );

	//get 3D from depth
	for(int y = 0; y < img3D.rows; y++)
	{
		Vec3f* img3Di = img3D.ptr<Vec3f>(y);
		const int16_t* depthImgi = depthImg.ptr<int16_t>(y);

		for(int x = 0; x < img3D.cols; x++){

			float d = (float)depthImgi[x];

			if ( d < g_max_z && d > 0 ){

				img3Di[x][0] = d * (float(x) - depth_intrinsic[2])/depth_intrinsic[0];
				img3Di[x][1] = d * (float(y) - depth_intrinsic[5])/depth_intrinsic[4];
				img3Di[x][2] = d;

			}
			else{

				img3Di[x] = 0;
			}

		}
	}

	g_means.clear();
	g_votes.clear();
	g_clusters.clear();

	string pose_filename(depth_fname.substr(0,depth_fname.find_last_of('_')));
	pose_filename += \"_pose.bin\";

	cv::Vec<float,POSE_SIZE> gt;
	bool have_gt = false;
	//try to read in the ground truth from a binary file
	FILE* pFile = fopen(pose_filename.c_str(), \"rb\");
	if(pFile){

		have_gt = true;
		have_gt &= ( fread( &gt[0], sizeof(float),POSE_SIZE, pFile) == POSE_SIZE );
		fclose(pFile);

	}

	//do the actual estimate
	estimator.estimate( 	img3D,
							g_means,
							g_clusters,
							g_votes,
							g_stride,
							g_maxv,
							g_prob_th,
							g_larger_radius_ratio,
							g_smaller_radius_ratio,
							false,
							g_th
						);

	cout << \"Heads found : \" << g_means.size() << endl;

	//assuming there's only one head in the image!
	if(g_means.size()>0){

		cout << \"Estimated: \" << g_means[0][0] << \" \" << g_means[0][1] << \" \" << g_means[0][2] << \" \" << g_means[0][3] << \" \" << g_means[0][4] << \" \" << g_means[0][5] <<endl;

		float pt2d_est[2];
		float pt2d_gt[2];

		if(have_gt){
			cout << \"Ground T.: \" << gt[0] << \" \" << gt[1] << \" \" << gt[2] << \" \" << gt[3] << \" \" << gt[4] << \" \" << gt[5] <<endl;

			cv::Vec<float,POSE_SIZE> err = (gt-g_means[0]);
			//multiply(err,err,err);
			for(int n=0;n<POSE_SIZE;++n)
				err[n] = err[n]*err[n];

			float h_err = sqrt(err[0]+err[1]+err[2]);
			float a_err = sqrt(err[3]+err[4]+err[5]);

			cout << \"Head error : \" << h_err << \" mm \" << endl;
			cout << \"Angle error : \" << a_err <<\" degrees \" <<  endl;

			pt2d_gt[0] = depth_intrinsic[0]*gt[0]/gt[2] + depth_intrinsic[2];
			pt2d_gt[1] = depth_intrinsic[4]*gt[1]/gt[2] + depth_intrinsic[5];

		}

		pt2d_est[0] = depth_intrinsic[0]*g_means[0][0]/g_means[0][2] + depth_intrinsic[2];
		pt2d_est[1] = depth_intrinsic[4]*g_means[0][1]/g_means[0][2] + depth_intrinsic[5];

	}

	return 0;

}
"
      associated_elems
      end
    end
  end

  package_ref 128514 // demo
end
