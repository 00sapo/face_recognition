class SVMTrainer
!!!148482.cpp!!!	formatDataForTraining(in data : MatMatrix, inout indexes : std::vector<int>) : Mat
    indexes.clear();

    // compute dataOut dimensions
    int height = 0;
    for (const auto& identity : data) {
        height += identity.size();
    }
    const int width = data[0][0].rows * data[0][0].cols; // assuming all Mat in dataIn have the same dimensions
    Mat dataOut(height, width, data[0][0].type());

    // every Mat in dataIn is converted to a row of dataOut
    int rowIndex = 0;
    for (size_t i = 0; i < data.size(); ++i) { // for each vector in dataIn (i.e. for each identity)..
        const auto& identity = data[i];
        int start = rowIndex; // keep track of the first row index of current identity
        for (size_t j = 0; j < identity.size(); ++j) { // for each Mat belonging to this identity...

            // convert the Mat in a row of DataOut
            auto iter = identity[j].begin<float>();
            for (auto k = 0; k < width; ++k, ++iter) {
                dataOut.at<float>(rowIndex, k) = *iter;
            }
            ++rowIndex;
        }

        // save the range of rows of dataOut belonging to this identity
        indexes.push_back(start);
    }

    return dataOut;
