class SVMTester
!!!136322.cpp!!!	load(in directoryName : string) : bool
    IDs.clear();
    grayscaleSVMs.clear();
    depthmapSVMs.clear();

    int numOfIdentities = 0;
    for (const auto& subdir : fs::directory_iterator(directoryName)) {
        ++numOfIdentities;
        vector<fs::path> dirElements;
        for (const auto& dirElement : fs::directory_iterator(subdir)) {
            dirElements.push_back(dirElement);
        }
        std::sort(dirElements.begin(), dirElements.end());

        vector<SVMStein> graySVMs, depthSVMs;
        for (const auto& elem : dirElements) {
            std::cout << "Loading " << elem << std::endl;
            try {
                if (elem.filename().string().find("grayscale") == 0)
                    graySVMs.emplace_back(elem.string());
                else if (elem.filename().string().find("depthmap") == 0)
                    depthSVMs.emplace_back(elem.string());
                else
                    std::cout << "Unrecognized directory element: " << elem;
            } catch (const cv::Exception& ex) {
                std::cout << ex.what() << std::endl;
            }
        }
        c = dirElements.size();
        grayscaleSVMs.push_back(std::move(graySVMs));
        depthmapSVMs.push_back(std::move(depthSVMs));
        std::cout << "Finished loading identity " << subdir.path().filename().string() << std::endl;
        IDs.push_back(subdir.path().filename().string());
    }

    N = numOfIdentities;

    return true;
!!!136450.cpp!!!	formatDataForPrediction(in data : vector<Mat>) : Mat
    const int height = data.size();
    const int width = data[0].rows * data[0].cols;
    Mat dataOut(height, width, data[0].type());

    for (auto i = 0; i < height; ++i) { // for each Mat belonging to this identity...
        // convert the Mat in a row of dataOut
        auto iter = data[i].begin<float>();
        for (auto j = 0; j < width; ++j, ++iter) {
            dataOut.at<float>(i, j) = *iter;
        }
    }

    return dataOut;
